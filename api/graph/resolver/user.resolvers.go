package resolver

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.68

import (
	"context"
	"my-graphql-project/api/graph/model"
	"my-graphql-project/domain/models"
)

// CreateUser is the resolver for the createUser field.
func (r *mutationResolver) CreateUser(ctx context.Context, input *model.UserInfo) (*model.MessageResponse, error) {
	data := models.User{
		Name:  input.Name,
		Email: input.Email,
	}

	if err := r.UserSvc.CreateUser(data); err != nil {
		return nil, err
	}
	return &model.MessageResponse{
		Status:  true,
		Message: "User created successfully",
	}, nil
}

// GetAllUser is the resolver for the getAllUser field.
func (r *queryResolver) GetAllUser(ctx context.Context) ([]*model.User, error) {
	users, err := r.UserSvc.GetAllUsers()
	if err != nil {
		return nil, err
	}
	var res []*model.User
	for _, user := range users {
		res = append(res, &model.User{
			ID:    int32(user.ID),
			Name:  user.Name,
			Email: user.Email,
		})
	}
	return res, nil
}
